%%% Fun that can be used to check that the product
%%% arrives in the end, to us.
Rec = fun() -> receive V -> io:format("~w~n", [V]) after 0 -> end_of_rec end end.


CA1 = spawn(container, idling, [actor_conveyor:create('CA1')]).
RA1 = spawn(container, idling, [actor_railway:create('RA1')]).
CA2 = spawn(container, idling, [actor_conveyor:create('CA2')]).
RA2 = spawn(container, idling, [actor_railway:create('RA2')]).
CA3 = spawn(container, idling, [actor_conveyor:create('CA3')]).
BQA1 = spawn(container, idling, [actor_basic_queue:create('BQA1')]).
WSA1 = spawn(container, idling, [actor_workstation:create('WSA1')]).
CA4 = spawn(container, idling, [actor_conveyor:create('CA4')]).
CA5 = spawn(container, idling, [actor_conveyor:create('CA5')]).
RA3 = spawn(container, idling, [actor_railway:create('RA3')]).
CA6 = spawn(container, idling, [actor_conveyor:create('CA6')]).
RA4 = spawn(container, idling, [actor_railway:create('RA4')]).
CA7 = spawn(container, idling, [actor_conveyor:create('CA7')]).
RA5 = spawn(container, idling, [actor_railway:create('RA5')]).
CA8 = spawn(container, idling, [actor_conveyor:create('CA8')]).
BQA2 = spawn(container, idling, [actor_basic_queue:create('BQA2')]).
WSA2 = spawn(container, idling, [actor_workstation:create('WSA2')]).
CA9 = spawn(container, idling, [actor_conveyor:create('CA9')]).
CA10 = spawn(container, idling, [actor_conveyor:create('CA10')]).
RA6 = spawn(container, idling, [actor_railway:create('RA6')]).
CA11 = spawn(container, idling, [actor_conveyor:create('CA11')]).
CB1 = spawn(container, idling, [actor_conveyor:create('CB1')]).
RB1 = spawn(container, idling, [actor_railway:create('RB1')]).
S = spawn(container, idling, [actor_scanner:create('S')]).
CB2 = spawn(container, idling, [actor_conveyor:create('CC2')]).
CC1 = spawn(container, idling, [actor_conveyor:create('CC1')]).
BQC1 = spawn(container, idling, [actor_basic_queue:create('BQC1')]).
WSC1 = spawn(container, idling, [actor_workstation_assembly:create('WSC1')]).
CC2 = spawn(container, idling, [actor_conveyor:create('CC2')]).
RC1 = spawn(container, idling, [actor_railway:create('RC1')]).
CC3 = spawn(container, idling, [actor_conveyor:create('CC3')]).
BQC2 = spawn(container, idling, [actor_basic_queue:create()]).
WSC2 = spawn(container, idling, [actor_workstation_finish:create('WSC2')]).
CC4 = spawn(container, idling, [actor_conveyor:create('CC4')]).
%RC2 = spawn(container, idling, [actor_railway:create('RC2')]).
%CC5 = spawn(container, idling, [actor_conveyor:create('CC5')]).
%BQC3 = spawn(container, idling, [actor_basic_queue:create('BQC3')]).
%WSC3 = spawn(container, idling, [actor_workstation:create('WSC3')]).
%CC6 = spawn(container, idling, [actor_conveyor:create('CC6')]).
%CC7 = spawn(container, idling, [actor_conveyor:create('CC7')]).
%SC = spawn(container, idling, [actor_scanner:create('SC')]).
So1 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So2 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So3 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So4 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So5 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So6 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So7 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So8 = spawn(supervisor_container, idling, [supervisor_purposeless:create()]).
So9 = spawn(supervisor_container, idling, [supervisor_end:create()]).


CA1 ! RA1 ! CA2 ! RA2 ! CA3 ! BQA1 ! WSA1 ! CA4 ! CA5 ! RA3 ! CA6 ! RA4 ! CA7 ! RA5 ! 
CA8 ! BQA2 ! WSA2 ! CA9 ! CA10 ! RA6 ! CA11 ! CB1 ! RB1 ! S ! CB2 ! CC1 ! BQC1 !
 WSC1 ! CC2 ! RC1 ! CC3 ! BQC2 ! WSC2 ! CC4 ! 
%RC2 ! CC5 ! BQC3! WSC3 ! CC6 ! CC7 ! SC !
So1 ! So2 ! So3 ! So4 ! So5 ! So6 ! So7 ! So8 ! So9 !
{start}.

CA1 ! {self(), {add, out, RA1}}.
RA1 ! {self(), {add, out, CA2}}.
CA2 ! {self(), {add, out, RA2}}.
RA2 ! {self(), {add, out, CA3}}.
RA2 ! {self(), {add, out, CA4}}.
CA4 ! {self(), {add, out, BQA1}}.
BQA1 ! {self(), {add, out, WSA1}}.
WSA1 ! {self(), {add, out, CA5}}.
CA5 ! {self(), {add, out, RA4}}.
CA3 ! {self(), {add, out, RA4}}.
RA4 ! {self(), {add, out, CA7}}.
CA7 ! {self(), {add, out, RA5}}.
RA5 ! {self(), {add, out, CA8}}.
RA5 ! {self(), {add, out, CA9}}.
CA8 ! {self(), {add, out, BQA2}}.
BQA2 ! {self(), {add, out, WSA2}}.
WSA2 ! {self(), {add, out, CA10}}.
CA10 ! {self(), {add, out, RA6}}.
CA9 ! {self(), {add, out, RA6}}.
RA6 ! {self(), {add, out, CA11}}.


RA4 ! {self(), {add, out, CB1}}.
CB1 ! {self(), {add, out, RB1}}.
RB1 ! {self(), {add, option, {scanner, S}}}.
RB1 ! {self(), {add, out, CB2}}.
RB1 ! {self(), {add, out, CC1}}.
CB2 ! {self(), {add, out, RA4}}.
CC1 ! {self(), {add, out, BQC1}}.
BQC1 ! {self(), {add, out, WSC1}}.
WSC1 ! {self(), {add, out, CC2}}.
CC2! {self(), {add, out, RC1}}.
RC1! {self(), {add, out, CC3}}.
CC3 ! {self(), {add, out, BQC2}}.
BQC2 ! {self(), {add, out, WSC2}}.
WSC2 ! {self(), {add, out, CC4}}.
%CC4 ! {self(), {add, out, RC2}}.
%RC2 ! {self(), {add, out, CC5}}.
%CC5 ! {self(), {add, out, BQC3}}.
%BQC3 ! {self(), {add, out, WSC3}}.
%WSC3 ! {self(), {add, out, CC6}}.


RA1 ! {self(), {add, option, {supervisor, So1}}}.
RA2 ! {self(), {add, option, {supervisor, So2}}}.
RA3 ! {self(), {add, option, {supervisor, So3}}}.
RA4 ! {self(), {add, option, {supervisor, So4}}}.
RA5 ! {self(), {add, option, {supervisor, So5}}}.
RA6 ! {self(), {add, option, {supervisor, So6}}}.
RB1 ! {self(), {add, option, {supervisor, So7}}}.
RC1 ! {self(), {add, option, {supervisor, So8}}}.
CC4 ! {self(), {add, out, So9}}.


P1 = actor_product:create().
P2 = actor_product:create().
P3 = actor_product:create().
P4 = actor_product:create().
P5 = actor_product:create().
P6 = actor_product:create().
P7 = actor_product:create().
P8 = actor_product:create().
P9 = actor_product:create().
P10 = actor_product:create().

CA1 ! {self(), {actor_product, P1}}.
CA1 ! {self(), {actor_product, P2}}.
CA1 ! {self(), {actor_product, P3}}.
CA1 ! {self(), {actor_product, P4}}.
CA1 ! {self(), {actor_product, P5}}.
CA1 ! {self(), {actor_product, P6}}.
CA1 ! {self(), {actor_product, P7}}.
CA1 ! {self(), {actor_product, P8}}.
CA1 ! {self(), {actor_product, P9}}.
CA1 ! {self(), {actor_product, P10}}.

CA1 ! {self(), {csv_export, list_data}}.
actor_contract:answer(P1, {csv_export, list_data}).
actor_contract:answer(P2, {csv_export, list_data}).
actor_contract:answer(P3, {csv_export, list_data}).
actor_contract:answer(P4, {csv_export, list_data}).
actor_contract:answer(P5, {csv_export, list_data}).
actor_contract:answer(P6, {csv_export, list_data}).
actor_contract:answer(P7, {csv_export, list_data}).
actor_contract:answer(P8, {csv_export, list_data}).
actor_contract:answer(P9, {csv_export, list_data}).
actor_contract:answer(P10, {csv_export, list_data}).

% R2 ! {self(), {prob_out, P1, C3}}.

% R4 ! {self(), {prob_out, P1, CB1}}.

% RB1 ! {self(), {prob_out, P1, CD1}}.








